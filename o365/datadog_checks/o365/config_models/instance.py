# This file is autogenerated.
# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:
#     ddev -x validate config -s <INTEGRATION_NAME>
#     ddev -x validate models -s <INTEGRATION_NAME>

from __future__ import annotations

from typing import Optional, Sequence

from pydantic import BaseModel, Field, root_validator, validator

from datadog_checks.base.utils.functions import identity
from datadog_checks.base.utils.models import validation

from . import defaults, validators


class MetricPatterns(BaseModel):
    class Config:
        allow_mutation = False

    exclude: Optional[Sequence[str]]
    include: Optional[Sequence[str]]


class InstanceConfig(BaseModel):
    class Config:
        allow_mutation = False

    client_id: str
    client_secret: str
    disable_generic_tags: Optional[bool]
    email_address: Optional[str]
    empty_default_hostname: Optional[bool]
    enable_activations: Optional[bool]
    enable_groups: Optional[bool]
    enable_incidents: Optional[bool]
    enable_onedrive: Optional[bool]
    enable_outlook: Optional[bool]
    enable_sharepoint: Optional[bool]
    enable_skype: Optional[bool]
    enable_synthetic_email: Optional[bool]
    enable_synthetics: Optional[bool]
    enable_teams: Optional[bool]
    enable_yammer: Optional[bool]
    metric_patterns: Optional[MetricPatterns]
    min_collection_interval: float
    onedrive_file_size: Optional[float] = Field(None, le=4000000.0)
    outlook_mailbox_topn: Optional[float] = Field(None, ge=-1.0)
    password: Optional[str]
    probe_mode: Optional[bool]
    service: Optional[str]
    sharepoint_sites: Optional[Sequence[str]] = Field(None, max_items=10, min_items=0)
    tags: Optional[Sequence[str]]
    tenant_id: str
    username: Optional[str]

    @root_validator(pre=True)
    def _initial_validation(cls, values):
        return validation.core.initialize_config(getattr(validators, 'initialize_instance', identity)(values))

    @validator('*', pre=True, always=True)
    def _ensure_defaults(cls, v, field):
        if v is not None or field.required:
            return v

        return getattr(defaults, f'instance_{field.name}')(field, v)

    @validator('*')
    def _run_validations(cls, v, field):
        if not v:
            return v

        return getattr(validators, f'instance_{field.name}', identity)(v, field=field)

    @root_validator(pre=False)
    def _final_validation(cls, values):
        return validation.core.finalize_config(getattr(validators, 'finalize_instance', identity)(values))
