from copy import deepcopy

DEFAULT_METRICS = {
    "boltdb_reads_total": "boltdb.reads.total",
    "boltdb_writes_total": "boltdb.writes.total",
    "http_api_request_duration_seconds": {"name": "http_api.request.duration.seconds"},
    "http_api_requests_total": "http_api.requests.total",
    "http_query_request_bytes": "http_query.request.bytes",
    "http_query_request_count": "http_query.request.count",
    "http_query_response_bytes": "http_query.response.bytes",
    "http_write_request_bytes": "http_write.request.bytes",
    "http_write_request_count": "http_write.request.count",
    "http_write_response_bytes": "http_write.response.bytes",
    "influxdb_buckets_total": {"name": "influxdb.buckets.total", "type": "gauge"},
    "influxdb_dashboards_total": {"name": "influxdb.dashboards.total", "type": "gauge"},
    "influxdb_organizations_total": {"name": "influxdb.orgs.total", "type": "gauge"},
    "influxql_service_requests": "influxql.service_requesrs",
    "influxql_service_executing_duration_seconds": "influxql.service_executing.duration.seconds",
    "influxdb_scrapers_total": {"name": "influxdb.scrapers.total", "type": "gauge"},
    "influxdb_telegrafs_total": {"name": "influxdb.telegrafs.total", "type": "gauge"},
    "influxdb_tokens_total": {"name": "influxdb.tokens.total", "type": "gauge"},
    "influxdb_uptime_seconds": "influxdb.uptime",
    "influxdb_users_total": {"name": "influxdb.users.total", "type": "gauge"},
    "qc_all_active": "qc.all_active",
    "qc_all_duration_seconds": "qc.all_duration.seconds",
    "qc_compiling_active": "qc.compiling_active",
    "qc_compiling_duration_seconds": "qc.compiling_duration.seconds",
    "qc_executing_active": "qc.executing_active",
    "qc_executing_duration_seconds": "qc.executing_duration.seconds",
    "qc_memory_unused_bytes": "qc.memory_unused_bytes",
    "qc_queueing_active": "qc.queueing_active",
    "qc_queueing_duration_seconds": "qc.queueing_duration.seconds",
    "qc_requests_total": "qc.requests.total",
    "query_control_all_active": "query_control.all.active",
    "query_control_all_duration_seconds": "query_control.all.duration.seconds",
    "query_control_compiling_active": "query_control.compiling.active",
    "query_control_compiling_duration_seconds": "query_control.compiling.duration.seconds",
    "query_control_executing_active": "query_control.executing.active",
    "query_control_executing_duration_seconds": "query_control.executing.duration.seconds",
    "query_control_memory_unused_bytes": "query_control.memory.usused_bytes",
    "query_control_queueing_active": "query_control.queueing.active",
    "query_control_queueing_duration_seconds": "query_control.queueing.duration.seconds",
    "query_control_requests": "query_control.requests",
    "query_influxdb_source_read_request_duration_seconds": "query.influxdb_source.read_request_duration.seconds",
    "service_annotation_call": "service_annotation.call",
    "service_annotation_duration": "service_annotation.duration",
    "service_bucket_new_call_total": "service_bucket.new_call.total",
    "service_bucket_new_duration": "service_bucket.new_duration",
    "service_bucket_new_error": "service_bucket.new_error",
    "service_notebook_call_total": "service_notebook.call.total",
    "service_notebook_duration": "service_notebook.duration",
    "service_onboard_new_call_total": "service_bucket.new_call.total",
    "service_onboard_new_duration": "service_onboard.new_duration",
    "service_org_call_total": "service_org.call_total",
    "service_org_duration": "service_org.duration",
    "service_org_new_call_total": "service_org.new_call.total",
    "service_org_new_duration": "service_org.new_duration",
    "service_password_new_call_total": "serivce_password.new_call.total",
    "service_password_new_duration": "service_password.new_duration",
    "service_password_new_error": "service_password.new_error",
    "service_pkger_call_total": "service_pkger.call.total",
    "service_pkger_duration": "service_pkger.duration",
    "service_pkger_template_export": "service_pkger.template.export",
    "service_secret_call_total": "service_secret.call.total",
    "service_secret_duration": "service_secret.duration",
    "service_session_call_total": "service_session.call.total",
    "service_session_duration": "service_session.duration",
    "service_session_error": "service_session.error",
    "service_token_call_total": "serivce_token.call.total",
    "service_token_duration": "service_token.duration",
    "service_urm_new_call_total": "service_urm.new_call.total",
    "service_urm_new_duration": "service_urm.new_duration",
    "service_user_new_call_total": "service_user.new_call.total",
    "service_user_new_duration": "service_user.new_duration",
    "service_user_new_error": "service_user.new_error",
    "storage_bucket_measurement_num": "storage_bucket.measurement_num",
    "storage_bucket_series_num": "storage_bucket.series_num",
    "storage_cache_disk_bytes": "storage_cache.disk_bytes",
    "storage_cache_inuse_bytes": "storage_cache.inuse_bytes",
    "storage_cache_writes_dropped": "storage_cache.writes_dropped",
    "storage_cache_writes_err": "storage_cache.writes_err",
    "storage_cache_writes_total": "storage_cache.writes.total",
    "storage_compactions_active": "storage_compactions.active",
    "storage_compactions_duration_seconds": "storage_compactions.duration.seconds",
    "storage_compactions_failed": "storage_compactions.failed",
    "storage_compactions_queued": "storage_compactions.queued",
    "storage_retention_check_duration": "storage_retention.check.duration",
    "storage_shard_disk_size": "storage_shard.disk_size",
    "storage_shard_fields_created": "storage_shard.fields_created",
    "storage_shard_series": "storage_shard.series",
    "storage_shard_write_count": "storage_shard.write.count",
    "storage_shard_write_dropped_sum": "storage_share.write_dropped.sum",
    "storage_shard_write_err_count": "storage_shard.write_err.count",
    "storage_shard_write_err_sum": "storage_shard.write_err.sum",
    "storage_shard_write_sum": "storage_shard.write.sum",
    "storage_tsm_files_disk_bytes": "storage_tsm.files.disk_bytes",
    "storage_tsm_files_total": "storage_tsm.files.total",
    "storage_wal_size": "storage_wal.size",
    "storage_wal_writes": "storage_wal.writes",
    "storage_wal_writes_err": "storage_wal.writes_err",
    "storage_writer_dropped_points": "storage_writer.dropped_points",
    "storage_writer_err_points": "storage_writer.err_points",
    "storage_writer_ok_points": "storage_writer.ok_points",
    "storage_writer_req_points": "storage_writer.req_points",
    "storage_writer_timeouts": "storage_writer.timeouts",
    "task_executor_promise_queue_usage": "task_executor.promise_queue.usage",
    "task_executor_total_runs_active": "task_executor.total_runs_active",
    "task_executor_workers_busy": "task_executor.workers_busy",
    "task_scheduler_current_execution": "task_scheduler.current_execution",
    "task_scheduler_execute_delta": "task_scheduler.execute_delta",
    "task_scheduler_execute_delta_count": "task_scheduler.execute_delta.count",
    "task_scheduler_execute_delta_sum": "task_scheduler.execute_delta.sum",
    "task_scheduler_schedule_delay": "task_scheduler.schedule_delay",
    "task_scheduler_schedule_delay_count": "task_scheduler.schedule_delay.count",
    "task_scheduler_schedule_delay_sum": "task_scheduler.schedule_delay.sum",
    "task_scheduler_total_execute_failure": "task_scheduler.total_execute_failure",
    "task_scheduler_total_execution_calls": "task_scheduler.total_execution_calls",
    "task_scheduler_total_release_calls": "task_scheduler.total_release_calls",
    "task_scheduler_total_schedule_calls": "task_scheduler.total_schedule_calls",
    "task_scheduler_total_schedule_fails": "task_scheduler.total_schedule_fails",
}

GO_METRICS = {
    "go_gc_duration_seconds": "go.gc_duration_seconds",
    "go_goroutines": "go.goroutines",
    "go_info": "go.info",
    "go_memstats_alloc_bytes_total": "go.memstats.alloc_bytes_total",
    "go_memstats_alloc_bytes": "go.memstats.alloc_bytes",
    "go_memstats_buck_hash_sys_bytes": "go.memstats.buck_hash_sys_bytes",
    "go_memstats_frees_total": "go.memstats.frees_total",
    "go_memstats_gc_cpu_fraction": "go.memstats.gc_cpu_fraction",
    "go_memstats_gc_sys_bytes": "go.memstats.gc_sys_bytes",
    "go_memstats_heap_alloc_bytes": "go.memstats.heap_alloc_bytes",
    "go_memstats_heap_idle_bytes": "go.memstats.heap_idle_bytes",
    "go_memstats_heap_inuse_bytes": "go.memstats.heap_inuse_bytes",
    "go_memstats_heap_objects": "go.memstats.heap_objects",
    "go_memstats_heap_released_bytes": "go.memstats.heap_released_bytes",
    "go_memstats_heap_sys_bytes": "go.memstats.heap_sys_bytes",
    "go_memstats_last_gc_time_seconds": "go.memstats.last_gc_time_seconds",
    "go_memstats_lookups_total": "go.memstats.lookups_total",
    "go_memstats_mallocs_total": "go.memstats.mallocs_total",
    "go_memstats_mcache_inuse_bytes": "go.memstats.mcache_inuse_bytes",
    "go_memstats_mcache_sys_bytes": "go.memstats.mcache_sys_bytes",
    "go_memstats_mspan_inuse_bytes": "go.memstats.mspan_inuse_bytes",
    "go_memstats_mspan_sys_bytes": "go.memstats.mspan_sys_bytes",
    "go_memstats_next_gc_bytes": "go.memstats.next_gc_bytes",
    "go_memstats_other_sys_bytes": "go.memstats.other_sys_bytes",
    "go_memstats_stack_inuse_bytes": "go.memstats.stack_inuse_bytes",
    "go_memstats_stack_sys_bytes": "go.memstats.stack_sys_bytes",
    "go_memstats_sys_bytes": "go.memstats.sys_bytes",
    "go_threads": "go.threads",
}

METRIC_MAP = deepcopy(DEFAULT_METRICS)
METRIC_MAP.update(GO_METRICS)


def construct_metrics_config(metric_map):
    metrics = []
    for raw_metric_name, metric_name in metric_map.items():
        if raw_metric_name.endswith("_total"):
            if isinstance(metric_name, dict):
                raw_metric_name = raw_metric_name[:-6]
                metric_name["name"] = metric_name["name"][:-6]
                config = {raw_metric_name: metric_name}
            else:
                raw_metric_name = raw_metric_name[:-6]
                metric_name = metric_name[:-6]
                config = {raw_metric_name: {"name": metric_name}}
        else:
            if isinstance(metric_name, dict):
                config = {raw_metric_name: metric_name}
            else:
                config = {raw_metric_name: {"name": metric_name}}
        metrics.append(config)

    return metrics
